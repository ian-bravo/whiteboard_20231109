Q1: Turning Strings to URLs~~~~~~~~~~~~~~~~
URLs cannot have spaces. Instead, all spaces in a string are replaced with %20. Write an algorithm that replaces all spaces in a string with %20.

You may not use the replace() method or regular expressions to solve this problem. Solve the problem with and without recursion.

Input: "Jasmine Ann Jones"

Output: "Jasmine%20Ann%20Jones"

WITHOUT INCURSION:

Use split ' ', to get array of words. Instantiate a new string with join method '%20'.


const userInput = "Jasmine Ann Jones"

urlMaker = function (userInput) {

	let words = userInput.split(' ');  //["Jasmine", "Ann", "Jones"]
	let newURL = words.join('%20'); //"Jasmine%20Ann%20Jones"

	return newURL;
}

WITH INCURSION:




-------------------------------

Q2: Array Deduping~~~~~~~~~~~~~~
Write an algorithm that removes duplicates from an array. Do not use a function like filter() to solve this. Once you have solved the problem, demonstrate how it can be solved with filter(). Solve the problem with and without recursion.


Input: [7, 9, "hi", 12, "hi", 7, 53]

Output: [7, 9, "hi", 12, 53]

Use forEach and if (userInput) .includes an element, then to .push the element into the empty array.


------------------------------

Q3:Compressing Strings~~~~~~~~~~~~~~~
Write an algorithm that takes a string with repeated characters and compresses them, using a number to show how many times the repeated character has been compressed. For instance, aaa would be written as 3a. Solve the problem with and without recursion.

Input: "aaabccdddda"

Output: "3ab2c4da"

use .split('') to get an array of chars. ["a", "a", "a", "b", "c", ....]
set up a count=0
for (i = 0; i<array.length, i++)
	


-------------------------------

Q4:Checking for Uniqueness~~~~~~~~~~~~~~~
Write an algorithm that determines whether all the elements in a string are unique. You may not convert the string into an array or use array methods to solve this problem. The algorithm should return a boolean.

Input: "hello"

Output: false

Input: "copyright"

Output: true


let userInput = "hello";

someFx = function (userInput) {
	for (var i=0; i<userInput.length; i++) {
		if (userInput.indexOf(userInput[i]) != userInput.lastIndexOf(userInput[i])) { //if the first occurrence is not the last occurrence then it is not unique (false)
			return false; //meaning it repeats
		}
	}
	return true; //if the first occurrence is also the last occurrence, meaning it the only one, then it's unique (true)
}



-------------------------------

Q5:Array Sorting~~~~~~~~~~~~~~~~~~~~~~~
Write an algorithm that sorts an array without using the sort() method. There are many different sorting algorithms — take the time to read about the following:

Quick sort
Merge sort
Heap sort
Insertion sort
Bubble sort
Selection sort

You may implement any of the above algorithms (or your own) to solve the problem — as long as it doesn't use sort().

Input: [9, 2, 7, 12]

Output: [2, 7, 9, 12]



